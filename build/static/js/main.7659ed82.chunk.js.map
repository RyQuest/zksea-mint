{"version":3,"sources":["helpers/Web3Helper.js","helpers/zksyncConnect.js","helpers/Transfer.js","reducers/authReducer.js","helpers/Mint.js","App.js","store/store.js","index.js"],"names":["providerOptions","walletconnect","package","WalletConnectProvider","options","rpc","network","chainId","Web3Modal","cacheProvider","disableInjectedProvider","zkSyncconnect","require","Buffer","a","depositStatus","console","log","window","ethereum","enable","provider","ethers","Web3Provider","signer","getSigner","getNetwork","chain","toast","error","position","zksync","syncProvider","fromEthSigner","syncWallet","address","getBalance","verifiedETHBalance","Balance","toString","parseFloat","depositToSyncFromEthereum","depositTo","token","amount","parseEther","deposit","awaitReceipt","depositReceipt","block","verified","setSigningKey","feeToken","ethAuthType","changePubkey","zkTransfer","price","Status","hash","finaliPrice","fee","syncTransfer","to","authSlice","createSlice","name","initialState","value","user","isAuthenticated","reducers","login","state","action","payload","logout","actions","bs58","Mint","getNonce","getEthereumBalance","balance","isSigningKeySet","getAccountId","undefined","Error","replace","from","contentHash","decode","slice","mint","mintNFT","recipient","finally","nftReceipt","txData","getAccountState","committed","nfts","nftData","Object","keys","NftToken","forEach","index","mintObj","App","useState","counter","setcounter","loading","setloading","ethPrice","setethPrice","dispatch","useDispatch","useSelector","auth","loginUser","handleLogin","zksyncCon","handleBuy","transfer","axios","post","res","data","ipfs_hash","_id","tokenId","contentId","setToken","className","src","alt","onClick","combineReducers","authReducer","persistConfig","key","storage","persistReducers","persistReducer","store","configureStore","reducer","middleware","thunk","persistor","persistStore","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.7659ed82.chunk.js","sourcesContent":["import Web3 from \"web3\";\r\nimport WalletConnectProvider from \"@walletconnect/web3-provider\";\r\nimport Web3Modal from \"web3modal\";\r\n\r\nconst providerOptions = {\r\n    // / See Provider Options Section /\r\n\r\n    walletconnect: {\r\n        package: WalletConnectProvider,\r\n        options: {\r\n            rpc: {\r\n                56: \"https://bsc-dataseed.binance.org/\",\r\n            },\r\n            network: \"mainnet\",\r\n            chainId: 56,\r\n            // infuraId: \"bnb1a5cae5d9hp0we9cx9v02n9hvmt94nnuguv0fav\",\r\n        },\r\n    },\r\n};\r\n\r\nconst web3Modal = new Web3Modal({\r\n    network: \"mainnet\", // optional\r\n    cacheProvider: true, // optional\r\n    providerOptions, // required\r\n    disableInjectedProvider: false,\r\n});\r\n\r\n\r\n\r\nexport const web3 = async () => {\r\n    const provider = await web3Modal.connect();\r\n    const web3 = new Web3(provider);\r\n\r\n    return web3;\r\n};\r\n\r\n\r\nexport const Provider=async()=>{\r\n    const provider = await web3Modal.connect();\r\n\r\n    return provider;\r\n}\r\n","import * as zksync from \"zksync\";\r\nimport * as ethers from \"ethers\";\r\nimport { toast } from \"react-toastify\";\r\nconst bs58 = require(\"bs58\");\r\nvar Buffer = require(\"buffer/\").Buffer;\r\n\r\nexport const zkSyncconnect = async () => {\r\n  let depositStatus = false\r\n  let chaindIdStatus = true\r\n  console.log(\"wallet connect\");\r\n  await window.ethereum.enable();\r\n\r\n  const provider = new ethers.providers.Web3Provider(window.ethereum);\r\n\r\n  const signer = provider.getSigner();\r\n\r\n  console.log(\"signer\", signer);\r\n\r\n  const chain = await provider.getNetwork()\r\n  console.log(\"chain\", chain.chainId);\r\n\r\n  if(chain.chainId != 4){\r\n    console.log(\"not match\");\r\n    toast.error(\"Please select rinkeby network\", {\r\n      position: \"bottom-center\",\r\n  });\r\n  }\r\n\r\n  const syncProvider = await zksync.getDefaultProvider(\"rinkeby\");\r\n\r\n  const syncWallet = await zksync.Wallet.fromEthSigner(signer, syncProvider);\r\n\r\n  console.log(\"syncWallet\", syncWallet);\r\n\r\n  let address = syncWallet.address();\r\n\r\n  console.log(\"address\", address);\r\n\r\n  const verifiedETHBalance = await syncWallet.getBalance(\"ETH\", \"verified\");\r\n\r\n  console.log(\"Balance _____\", verifiedETHBalance);\r\n  let Balance = verifiedETHBalance.toString();\r\n  Balance = parseFloat(Balance);\r\n  Balance = Balance / 10 ** 18;\r\n  console.log(\"Balancein number _____\", Balance);\r\n\r\n  // console.log(\"price\", price);\r\n  // if (price == \"\" || price == null || price == undefined) {\r\n  //   price = \"0.001\";\r\n  // }\r\n\r\n  // let finaliPrice = price.toString();\r\n  // console.log(typeof finaliPrice);\r\n\r\n  let TempBalCheck = \"0.01\"\r\n  let finaliPrice= \"0.1\"\r\n  // finaliPrice = parseFloat(finaliPrice)\r\n\r\n  if (verifiedETHBalance < TempBalCheck) {\r\n    toast(\"You do not have sufficient funds, please deposit amount to activate zksync account\", {\r\n      position: \"bottom-center\",\r\n    });\r\n    const deposit = await syncWallet.depositToSyncFromEthereum({\r\n      depositTo: syncWallet.address(),\r\n      token: \"ETH\",\r\n      amount: ethers.utils.parseEther(finaliPrice),\r\n    });\r\n    try {\r\n      const depositReceipt = await deposit.awaitReceipt();\r\n\r\n      console.log(\"depositReceipt\", depositReceipt);\r\n      depositStatus = true\r\n\r\n      console.log(\"verified in depositReceipt\", depositReceipt.block.verified);\r\n      if (depositReceipt.block.verified === false) {\r\n        console.log(\"verified block error\");\r\n        toast(\"Verify Your balance first\", {\r\n          position: \"bottom-center\",\r\n        });\r\n        \r\n      }\r\n    } catch (e) {\r\n      console.log(e);\r\n    }\r\n  }\r\n  \r\n  try {\r\n    const changePubkey = await syncWallet.setSigningKey({\r\n        feeToken: \"ETH\",\r\n        ethAuthType: \"ECDSA\",\r\n        });\r\n\r\n        // Wait until the tx is committed\r\n        await changePubkey.awaitReceipt();\r\n } catch (error) {\r\n     console.log(\"Error\", error);\r\n }\r\n\r\n  \r\n  toast(\"Wallet connect successful\", {\r\n    position: \"bottom-center\",\r\n  });\r\n  return {\r\n    Balance,\r\n    address,\r\n    depositStatus\r\n  };\r\n};\r\n","import * as zksync from \"zksync\";\r\nimport * as ethers from \"ethers\";\r\nimport { toast } from \"react-toastify\";\r\nconst bs58 = require(\"bs58\");\r\nvar Buffer = require(\"buffer/\").Buffer;\r\n\r\nexport const zkTransfer = async (price) => {\r\n    let Status = true\r\n    let hash = \"\"\r\n    console.log(\"wallet connect\");\r\n    await window.ethereum.enable();\r\n  \r\n    const provider = new ethers.providers.Web3Provider(window.ethereum);\r\n  \r\n    const signer = provider.getSigner();\r\n  \r\n    console.log(\"signer\", signer);\r\n  \r\n    const syncProvider = await zksync.getDefaultProvider(\"rinkeby\");\r\n  \r\n    const syncWallet = await zksync.Wallet.fromEthSigner(signer, syncProvider);\r\n  \r\n    console.log(\"syncWallet\", syncWallet);\r\n  \r\n    let address = syncWallet.address();\r\n  \r\n    console.log(\"address\", address);\r\n  \r\n    const verifiedETHBalance = await syncWallet.getBalance(\"ETH\", \"verified\");\r\n  \r\n    console.log(\"Balance _____\", verifiedETHBalance);\r\n    let Balance = verifiedETHBalance.toString();\r\n    Balance = parseFloat(Balance);\r\n    Balance = Balance / 10 ** 18;\r\n    console.log(\"Balancein number _____\", Balance);\r\n\r\n  \r\n    let finaliPrice= price\r\n    finaliPrice = finaliPrice.toString()\r\n    const fee = ethers.utils.parseEther(\"0.0001\");\r\n\r\n    price = parseFloat(price)\r\n\r\n    if(Balance < price){\r\n        toast.error(\"Insufficient funds\", {\r\n            position: \"bottom-center\",\r\n        });\r\n            Status = false\r\n    }\r\n    // if (verifiedETHBalance < finaliPrice) {\r\n\r\n      if(Status == true){\r\n        const deposit = await syncWallet.syncTransfer({\r\n            to: \"0xf04f23EBf26c8cE4369a5ac2049D6c283f868C11\",\r\n            token: \"ETH\",\r\n            amount: ethers.utils.parseEther(finaliPrice),\r\n            fee : fee\r\n          });\r\n          \r\n          try {\r\n            const depositReceipt = await deposit.awaitReceipt();\r\n            hash  =\"0xbdac7668775fa31d618f879c68e31273a5d0a61b5107eb559d777ea368978ea4\"\r\n            console.log(\"depositReceipt\", depositReceipt);\r\n            console.log(\"hash\", hash);\r\n            Status = true\r\n      \r\n            console.log(\"verified in depositReceipt\", depositReceipt.block.verified);\r\n        } catch (e) {\r\n            console.log(e);\r\n          }   \r\n      }\r\n        \r\n\r\n\r\n    return {\r\n      Balance,\r\n      address,\r\n      Status,\r\n      hash\r\n    };\r\n};\r\n\r\n\r\n// export async function zkTransfer(){\r\n\r\n//     await window.ethereum.enable()\r\n//     const provider = new ethers.providers.Web3Provider(window.ethereum);\r\n//     const signer = provider.getSigner();\r\n//     console.log(\"signer\",signer);\r\n//     const syncProvider = await zksync.getDefaultProvider(\"rinkeby\");\r\n//     const syncWallet = await zksync.Wallet.fromEthSigner(signer, syncProvider);\r\n//     console.log(\"syncWallet\",syncWallet);\r\n    \r\n//     const address = syncWallet.address();\r\n    \r\n//     console.log(\"address\",address);\r\n    \r\n//     const verifiedETHBalance = await syncWallet.getBalance(\"ETH\", \"verified\");\r\n    \r\n//     console.log(\"Balance _____\", verifiedETHBalance)\r\n//     const balance = await syncWallet.getEthereumBalance('ETH')\r\n//     console.log(\"balance\",balance);\r\n\r\n//     let temp = await syncWallet.isSigningKeySet()\r\n//     console.log(\"await syncWallet.isSigningKeySet()\", temp);\r\n\r\n//      try {\r\n//         const changePubkey = await syncWallet.setSigningKey({\r\n//             feeToken: \"ETH\",\r\n//             ethAuthType: \"ECDSA\",\r\n//             });\r\n    \r\n//             // Wait until the tx is committed\r\n//             await changePubkey.awaitReceipt();\r\n//      } catch (error) {\r\n//          console.log(\"Error\", error);\r\n//      }\r\n\r\n//     if (!(await syncWallet.isSigningKeySet())) {\r\n//         if ((await syncWallet.getAccountId()) == undefined) {\r\n//         throw new Error(\"Unknown account\");\r\n//         }\r\n\r\n//         console.log(\"isSigningKeySet\");\r\n\r\n//         // As any other kind of transaction, `ChangePubKey` transaction requires fee.\r\n//         // User doesn't have (but can) to specify the fee amount. If omitted, library will query zkSync node for\r\n//         // the lowest possible amount.\r\n//         const changePubkey = await syncWallet.setSigningKey({\r\n//         feeToken: \"ETH\",\r\n//         ethAuthType: \"ECDSA\",\r\n//         });\r\n\r\n//         // Wait until the tx is committed\r\n//         await changePubkey.awaitReceipt();\r\n//     }\r\n\r\n//     const fee = ethers.utils.parseEther(\"0.001\");\r\n  \r\n//     const transfer =  syncWallet.syncTransfer({\r\n//       to: \"0xf04f23EBf26c8cE4369a5ac2049D6c283f868C11\",\r\n//       token: \"ETH\",\r\n//       amount: ethers.utils.parseEther(\"0.1\"),\r\n//       fee\r\n//     });\r\n//     const transferReceipt =  transfer.finally();\r\n    \r\n//     console.log(\"transferReceipt\",transferReceipt);\r\n    \r\n//     // Get state of account\r\n//     const state = await syncWallet.getAccountState(address);\r\n//     // View committed NFTs\r\n//     console.log(\"commited\",state.committed.balances);\r\n//     // View verified NFTs\r\n//     console.log(\"verified\",state.verified.balances);\r\n//     }","import { createSlice } from \"@reduxjs/toolkit\";\r\n\r\nconst authSlice = createSlice({\r\n    name: \"Auth\",\r\n    initialState: { value: { user: {}, isAuthenticated: false } },\r\n    reducers: {\r\n        login: (state, action) => {\r\n            state.value = action.payload;\r\n        },\r\n        logout: (state) => {\r\n            state.value = { user: {}, isAuthenticated: false };\r\n        },\r\n    },\r\n});\r\n\r\nexport const { login, logout } = authSlice.actions;\r\nexport default authSlice.reducer;\r\n","import * as zksync from \"zksync\";\r\nimport * as ethers from \"ethers\";\r\nconst bs58 = require('bs58')\r\nvar Buffer = require('buffer/').Buffer;\r\n\r\nexport const Mint= async(hash)=>{\r\n\r\n    await window.ethereum.enable()\r\n\r\n    const provider = new ethers.providers.Web3Provider(window.ethereum);\r\n\r\n    const signer = provider.getSigner();\r\n\r\n    console.log(\"signer\",signer);\r\n\r\n    const syncProvider = await zksync.getDefaultProvider(\"rinkeby\");\r\n    \r\n    const syncWallet = await zksync.Wallet.fromEthSigner(signer, syncProvider);\r\n\r\n    // console.log(\"syncWallet\",syncWallet);\r\n    \r\n    const address = syncWallet.address();\r\n    \r\n    // console.log(\"address\",address);\r\n\r\n    const nonce = await syncWallet.getNonce()\r\n    //  console.log(\"address\",address);\r\n    \r\n    const verifiedETHBalance = await syncWallet.getBalance(\"ETH\", \"verified\");\r\n    \r\n    console.log(\"Balance _____\", verifiedETHBalance)\r\n\r\n    const balance = await syncWallet.getEthereumBalance('ETH')\r\n\r\n    console.log(\"balance\",balance);\r\n    \r\n    if(verifiedETHBalance==0)\r\n    {\r\n                \r\n      const deposit = await syncWallet.depositToSyncFromEthereum({\r\n        depositTo: syncWallet.address(),\r\n        token: \"ETH\",\r\n        amount: ethers.utils.parseEther(\"0.01\"),\r\n      });\r\n      \r\n      try{\r\n           \r\n        const depositReceipt = await deposit.awaitReceipt();\r\n\r\n        console.log(\"depositReceipt\",depositReceipt);\r\n\r\n       }catch(e){console.log(e)}\r\n     \r\n\r\n    }\r\n    \r\n    if (!(await syncWallet.isSigningKeySet())) {\r\n      if ((await syncWallet.getAccountId()) == undefined) {\r\n        throw new Error(\"Unknown account\");\r\n      }\r\n    \r\n      // As any other kind of transaction, `ChangePubKey` transaction requires fee.\r\n      // User doesn't have (but can) to specify the fee amount. If omitted, library will query zkSync node for\r\n      // the lowest possible amount.\r\n      const changePubkey = await syncWallet.setSigningKey({\r\n        feeToken: \"ETH\",\r\n        ethAuthType: \"ECDSA\",\r\n      });\r\n    \r\n      // Wait until the tx is committed\r\n      await changePubkey.awaitReceipt();\r\n    }\r\n\r\n\r\n       // start\r\n      //  const firstimeactivation = await syncWallet.setSigningKey({\r\n      //   feeToken : \"ETH\",\r\n      //   // fee: ethers.utils.parseEther(\"0.0001\"),\r\n      //   ethAuthType : \"ECDSA\"\r\n      // });\r\n      // const firstimeactivationReceipt =  (await firstimeactivation).awaitReceipt;\r\n\r\n      // console.log(\"firstimeactivationReceipt\",firstimeactivationReceipt);\r\n\r\n\r\n\r\n\r\n    // const fee = ethers.utils.parseEther(\"0.001\");\r\n    console.log('ipfs hash',hash)\r\n    hash=hash.toString();\r\n    hash = hash.replace(\r\n      \"https://gateway.ipfs.io/ipfs/\",\r\n      \"\"\r\n    );\r\n    console.log('ipfs hash',hash)\r\n\r\n    const bytes = Buffer.from(hash, 'hex')\r\n    // let contentHash  = bs58.encode(bytes)\r\n    //ethers.utils.formatBytes32String(hash) //\"0xbd7289936758c562235a3a42ba2c4a56cbb23a263bb8f8d27aead80d74d9d996\";\r\n    let contentHash  = \"0x\"+bs58.decode(hash).slice(2).toString('hex')\r\n    console.log('hash',contentHash)\r\n\r\n    const mint =  syncWallet.mintNFT({\r\n      recipient: syncWallet.address(),\r\n      contentHash,\r\n      feeToken: \"ETH\"\r\n    });\r\n\r\n    const nftReceipt = await mint.finally();\r\n    \r\n    console.log(\"nftReceipt\",nftReceipt);\r\n\r\n    console.log(\"nftdata\",(await nftReceipt).txData);\r\n    \r\n    \r\n    // Get state of account\r\n    const state = await syncWallet.getAccountState(address);\r\n    console.log(\"state\",state);\r\n\r\n    // View committed NFTs\r\n    console.log(\"commited\",state.committed.nfts);\r\n    // View verified NFTs\r\n    console.log(\"verified\",state.verified.nfts);\r\n    let nftData=Object.keys(state.committed.nfts);\r\n    let NftToken=\"\";\r\n    nftData.forEach((token,index)=>{\r\n      NftToken=token;\r\n    })\r\n\r\n    let mintObj={NftToken:NftToken,\r\n                 address:address\r\n                 }  \r\n                 \r\n    return mintObj;\r\n  }","import { useState, useEffect } from \"react\";\r\nimport Connect from \"./helpers/Connect\";\r\nimport { zkSyncconnect } from \"./helpers/zksyncConnect\";\r\nimport { zkTransfer } from \"./helpers/Transfer\";\r\nimport { login } from \"./reducers/authReducer\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { Transaction } from \"./helpers/Transaction\";\r\nimport { ToastContainer, toast } from \"react-toastify\";\r\nimport axios from \"axios\";\r\nimport { Mint } from \"./helpers/Mint\";\r\n\r\nconst url = \"http://52.14.90.31:3001/random-NFT\";\r\nfunction App() {\r\n  const [counter, setcounter] = useState(0);\r\n\r\n  const [loading, setloading] = useState(false);\r\n\r\n  const [ethPrice, setethPrice] = useState(0);\r\n  const dispatch = useDispatch();\r\n\r\n  const isAuthenticated = useSelector(\r\n    (state) => state.auth.value.isAuthenticated\r\n  );\r\n\r\n  const loginUser = useSelector((state) => state.auth.value.user);\r\n\r\n  function inc() {\r\n    if (counter < 5) {\r\n      setcounter(counter + 1);\r\n    } else {\r\n      setcounter(5);\r\n    }\r\n\r\n    if (ethPrice === 0) {\r\n      setethPrice(\".069\");\r\n    }\r\n\r\n    if (ethPrice === \".069\") {\r\n      setethPrice(\".138\");\r\n    }\r\n\r\n    if (counter === 2) {\r\n      setethPrice(\".207\");\r\n    }\r\n\r\n    if (counter === 3) {\r\n      setethPrice(\".276\");\r\n    }\r\n\r\n    if (counter === 4) {\r\n      setethPrice(\".345\");\r\n    }\r\n  }\r\n\r\n  function decr() {\r\n    if (counter > 0) {\r\n      setcounter(counter - 1);\r\n    } else {\r\n      setcounter(0);\r\n    }\r\n\r\n    if (ethPrice === \".345\") {\r\n      setethPrice(\".276\");\r\n    }\r\n\r\n    if (ethPrice === \".276\") {\r\n      setethPrice(\".207\");\r\n    }\r\n\r\n    if (ethPrice === \".207\") {\r\n      setethPrice(\".138\");\r\n    }\r\n\r\n    if (ethPrice === \".138\") {\r\n      setethPrice(\".069\");\r\n    }\r\n\r\n    if (ethPrice === \".069\") {\r\n      setethPrice(0);\r\n    }\r\n  }\r\n\r\n  function max() {\r\n    setcounter(5);\r\n    setethPrice(\".345\");\r\n  }\r\n\r\n  const handleLogin = async () => {\r\n\r\n    let zksyncCon = await zkSyncconnect()\r\n    console.log(\"zksyncCon\", zksyncCon);\r\n\r\n    // let address = await Connect();\r\n    // console.log(\"address\", address);\r\n\r\n    if (zksyncCon.address == null) {\r\n      toast.error(\"Please switch to rinkeby network\", {\r\n        position: \"bottom-center\",\r\n      });\r\n    } else {\r\n      dispatch(\r\n        login({\r\n          user: {\r\n            // balance: log.Balance,\r\n            address: zksyncCon.address,\r\n          },\r\n          isAuthenticated: true,\r\n        })\r\n      );\r\n\r\n      console.log(\"login\", loginUser);\r\n    }\r\n  };\r\n\r\n  const handleBuy = async () => {\r\n    if (isAuthenticated) {\r\n      let price = parseFloat(ethPrice);\r\n      setloading(true);\r\n      let transfer = await zkTransfer(price)\r\n      console.log(\"transfer\", transfer);\r\n\r\n        if(transfer.Status == true){\r\n\r\n          // successfull transfer now mint\r\n          let res = await axios.post(url, {\r\n              address: loginUser.address,\r\n              price: price,\r\n              hash: transfer.hash,\r\n          });\r\n          console.log(\"res\", res);\r\n\r\n          console.log(\"ipfs\", res.data.ipfs_hash);\r\n          console.log(\"contentid\", res.data._id);\r\n\r\n\r\n          let mintNFT = await Mint(res.data.ipfs_hash)\r\n          console.log(\"mintNFT\", mintNFT);\r\n\r\n          let setToken = await axios.post(\"http://52.14.90.31:3001/set-tokenId\", {\r\n            tokenId: mintNFT.NftToken,\r\n            contentId: res.data._id,\r\n          });\r\n          console.log(\"setToken\", setToken);\r\n\r\n          toast(\"Transaction Successful\", {\r\n            position: \"bottom-center\",\r\n          });\r\n         \r\n        }else{\r\n          toast.error(\"Transaction Unsuccessful\", {\r\n            position: \"bottom-center\",\r\n          });\r\n        }\r\n      // let price = parseFloat(ethPrice);\r\n      // let tx = {\r\n      //   from: loginUser.address,\r\n      //   to: \"0x15C989EC8d1b4AF23894900a624889B33d0Dc645\",\r\n      //   gas: 500000,\r\n      //   value: \"0x\" + (price * 1000000000000000000).toString(16),\r\n      // };\r\n      // let txr = await Transaction(tx);\r\n      // console.log(\"txr\", txr);\r\n\r\n      // if (txr == false) {\r\n      //   toast.error(\"Something went wrong!\", {\r\n      //     position: \"bottom-center\",\r\n      //   });\r\n      // } else {\r\n      //   let res = await axios.post(url, {\r\n      //     address: loginUser.address,\r\n      //     price: price,\r\n      //     hash: txr.transactionHash,\r\n      //   });\r\n      //   console.log(\"res\", res);\r\n\r\n      //   setloading(false);\r\n\r\n      //   toast(\"Transation successful\", {\r\n      //     position: \"bottom-center\",\r\n      //   });\r\n      // }\r\n    }\r\n     else {\r\n      toast.error(\"Please connect wallet\", {\r\n            position: \"bottom-center\",\r\n      });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <ToastContainer />\r\n     \r\n      <div className=\"header\">\r\n\r\n        {loading && (\r\n          <div className=\"text-center\">\r\n            <div className=\"spinner-border text-white\"></div>\r\n          </div>\r\n        )}\r\n        {/* <div className=\"logo\"><img src=\"/images/LOGO-main.png\" alt=\"\" /></div> */}\r\n        <div className=\"logo\">\r\n          <img src=\"/images/logo-bull.png\" alt=\"\" />\r\n        </div>\r\n\r\n        <button onClick={() => handleLogin()} className=\"connectWallet\">\r\n          CONNECT WALLET\r\n        </button>\r\n      </div>\r\n      <div className=\"main\">\r\n        {/* <h1>MINT YOUR zkAPES</h1> */}\r\n        <h1>MINT YOUR Bullish Freaks</h1>\r\n\r\n\r\n        <div className=\"card\">\r\n          <div className=\"cardFlex1\">\r\n            <h2 className=\"aaa\">10,000 NFTs</h2>\r\n          </div>\r\n\r\n          <div className=\"cardFlex1\">\r\n            <div className=\"innerCont\">\r\n              <h2>MY ETH BALANCE</h2>\r\n              <h3>0 ETH</h3>\r\n            </div>\r\n\r\n            <div className=\"middle\">\r\n              <h2>AMOUNT</h2>\r\n              <div className=\"ggg\">\r\n                <button onClick={decr}>-</button>\r\n                <span>{counter}</span>\r\n                <button onClick={inc}>+</button>\r\n              </div>\r\n              <button className=\"max\" onClick={max}>\r\n                Max\r\n              </button>\r\n            </div>\r\n\r\n            <div className=\"innerCont\">\r\n              <h2>TOTAL PRICE</h2>\r\n              <h3>{ethPrice} ETH</h3>\r\n            </div>\r\n\r\n            <div className=\"cardFlex1 mainBTN\">\r\n              <button onClick={handleBuy}>Mint Now</button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"darkBackground\"></div>\r\n        {/* <img src=\"/images/mainBG.jpeg\" className=\"background\" alt=\"\" /> */}\r\n        <img src=\"/images/bg-bull.png\" className=\"background\" alt=\"\" />\r\n      </div>\r\n\r\n      <div className=\"footer\">\r\n        <p>Copyright © 2022 zkAPES, All Right Reserved</p>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { configureStore } from \"@reduxjs/toolkit\";\r\nimport authReducer from \"../reducers/authReducer\";\r\nimport thunk from \"redux-thunk\";\r\nimport storage from \"redux-persist/lib/storage\";\r\nimport persistReducer from \"redux-persist/es/persistReducer\";\r\nimport { combineReducers } from \"redux\";\r\n\r\nconst reducers = combineReducers({\r\n    auth: authReducer,\r\n});\r\nconst persistConfig = {\r\n    key: \"root\",\r\n    storage,\r\n};\r\n\r\nconst persistReducers = persistReducer(persistConfig, reducers);\r\n\r\nconst store = configureStore({\r\n    reducer: persistReducers,\r\n    middleware: [thunk],\r\n});\r\n\r\nexport default store;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport 'react-toastify/dist/ReactToastify.css';\nimport { Provider } from \"react-redux\";\nimport { PersistGate } from \"redux-persist/integration/react\";\nimport { persistStore } from \"redux-persist\";\nimport store from \"./store/store\";\n\nlet persistor = persistStore(store);\n\nReactDOM.render(\n  <Provider store={store}>\n      <PersistGate loading={null} persistor={persistor}>\n      <App />\n    </PersistGate>\n    </Provider>,\n  document.getElementById('root')\n  \n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n\n"],"sourceRoot":""}